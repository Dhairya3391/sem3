Lab-13
//p-A

CREATE TABLE Student (
    Rno INT PRIMARY KEY,
    Name VARCHAR(255),
    Branch VARCHAR(255)
);

CREATE TABLE Result (
    Rno INT PRIMARY KEY,
    SPI FLOAT
);

CREATE TABLE Employee (
    EmployeeNo VARCHAR(255) PRIMARY KEY,
    Name VARCHAR(255),
    ManagerNo VARCHAR(255)
);

INSERT INTO Student VALUES
(101, 'Raju', 'CE'),
(102, 'Amit', 'CE'),
(103, 'Sanjay', 'ME'),
(104, 'Neha', 'EC'),
(105, 'Meera', 'EE'),
(106, 'Mahesh', 'ME');

INSERT INTO Result VALUES
(101, 8.8),
(102, 9.2),
(103, 7.6),
(104, 8.2),
(105, 7.0),
(106, 8.9);

INSERT INTO Employee VALUES
('E01', 'Tarun', NULL),
('E02', 'Rohan', 'E02'),
('E03', 'Priya', 'E01'),
('E04', 'Milan', 'E03'),
('E05', 'Jay', 'E01'),
('E06', 'Anjana', 'E04');

SELECT * FROM Student CROSS JOIN Result;

SELECT Student.Rno, Student.Name, Student.Branch, Result.SPI FROM Student JOIN Result ON Student.Rno = Result.Rno;

SELECT Student.Rno, Student.Name, Student.Branch, Result.SPI FROM Student JOIN Result ON Student.Rno = Result.Rno WHERE Branch = "CE";

SELECT Student.Rno, Student.Name, Student.Branch, Result.SPI FROM Student JOIN Result ON Student.Rno = Result.Rno WHERE Branch != "EC";

SELECT AVG(Result.SPI) AS Average_SPI, Student.Branch FROM Result JOIN Student ON Result.Rno = Student.Rno GROUP BY Branch;

SELECT AVG(Result.SPI) AS Average_SPI, Student.Branch FROM Result JOIN Student ON Result.Rno = Student.Rno GROUP BY Branch ORDER BY Average_SPI ASC;

SELECT AVG(Result.SPI) AS Average_SPI FROM Result JOIN Student ON Result.Rno = Student.Rno WHERE Branch IN ("CE", "ME");

SELECT * FROM Student LEFT OUTER JOIN Result ON Student.Rno = Result.Rno;

SELECT * FROM Student RIGHT OUTER JOIN Result ON Student.Rno = Result.Rno;

SELECT * FROM Student FULL OUTER JOIN Result ON Student.Rno = Result.Rno;

SELECT Employee.Name AS Employee_Name, Manager.Name AS Manager_Name FROM Employee LEFT OUTER JOIN Employee AS Manager ON Employee.ManagerNo = Manager.EmployeeNo;




//p-B

SELECT PersonName, DepartmentName, DepartmentCode
FROM Person
JOIN Department ON Person.DepartmentID = Department.DepartmentID;

SELECT DepartmentName, MAX(Salary) AS MaxSalary, MIN(Salary) AS MinSalary
FROM Person
JOIN Department ON Person.DepartmentID = Department.DepartmentID
GROUP BY DepartmentName;

SELECT DepartmentName, SUM(Salary) AS TotalSalary
FROM Person
JOIN Department ON Person.DepartmentID = Department.DepartmentID
GROUP BY DepartmentName
HAVING SUM(Salary) > 100000;

SELECT PersonName, Salary, DepartmentName
FROM Person
JOIN Department ON Person.DepartmentID = Department.DepartmentID
WHERE City = 'Jamnagar';

SELECT PersonName, Salary
FROM Person
WHERE DepartmentID IS NULL;

SELECT DepartmentName, COUNT(*) AS PersonCount
FROM Person
JOIN Department ON Person.DepartmentID = Department.DepartmentID
GROUP BY DepartmentName;

SELECT AVG(Salary) AS AverageSalary
FROM Person
WHERE City = 'Ahmedabad';

SELECT CONCAT(PersonName, ' earns ', Salary, ' from department ', DepartmentName, ' monthly.') AS OutputString 
FROM Person 
JOIN Department ON Person.DepartmentID = Department.DepartmentID;

SELECT *
FROM Department 
WHERE NOT EXISTS (
    SELECT * 
    FROM Person 
    WHERE Person.DepartmentID = Department.DepartmentID);

SELECT City, DepartmentName, SUM(Salary) AS TotalSalary, AVG(Salary) AS AverageSalary, MAX(Salary) AS MaxSalary 
FROM Person 
JOIN Department ON Person.DepartmentID = Department.DepartmentID 
GROUP BY City, DepartmentName;






//p-C

SELECT DISTINCT City FROM Person;


SELECT 
    COUNT(*) as CountOfPersons,
    d.*
FROM 
    Person p 
    JOIN Department d ON (p.DepartmentID = d.DepartmentID)
GROUP BY 
    d.DepartmentName,
    d.Location,
    d.DepartmentCode,
    d.DepartmentID 
HAVING COUNT(*) > 2;


SELECT CONCAT(LEFT(Person.PersonName, 3), RIGHT(Person.City, 3)) AS CombinedColumn FROM Person;


UPDATE Person SET Salary = Salary * 1.1 WHERE DepartmentID = 2;


SELECT *
FROM Person 
WHERE DATEDIFF(CURDATE(), JoiningDate) > 365;

